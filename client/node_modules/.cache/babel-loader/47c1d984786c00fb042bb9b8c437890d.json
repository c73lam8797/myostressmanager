{"ast":null,"code":"import Chart from 'chart.js';\nimport io from 'socket.io-client';\n\nfunction Graph() {\n  let socket = io.connect('http://localhost:5000'); //connect to server\n\n  let ctx = document.getElementById('myChart').getContext('2d');\n  let chart = new Chart(ctx, {\n    // The type of chart we want to create\n    type: 'line',\n    // The data for our dataset\n    data: {\n      labels: [],\n      datasets: [{\n        label: \"Electric Potential of Muscle\",\n        borderColor: \"#FF5733\",\n        data: [],\n        fill: false,\n        pointStyle: 'circle',\n        backgroundColor: '#3498DB',\n        pointRadius: 5,\n        pointHoverRadius: 7,\n        lineTension: 0\n      }]\n    },\n    // Configuration options go here\n    options: {// scales: {\n      //   yAxes: [{\n      //     display: true,\n      //     ticks: {\n      //         suggestedMin: 80,    // minimum will be 0, unless there is a lower value.\n      //         // OR //\n      //         // beginAtZero: true   // minimum value will be 0.\n      //         max: 120,\n      //     }\n      //   }]\n      // }\n    }\n  });\n  socket.on('sensor', function (data) {\n    //As sensor data is received \n    // console.log(data.read);\n    let sensor = data.read.split(\" \"); // console.log(sensor[2]);\n\n    document.getElementById('date').innerHTML = data.date; //update the date\n\n    if (chart.data.labels.length != 15) {\n      //If we have less than 15 data points in the graph\n      chart.data.labels.push(data.time); //Add time in x-asix\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.push(sensor[2]); //Add sensor data in y-axis\n      });\n    } else {\n      //If there are already 15 data points in the graph.\n      chart.data.labels.shift(); //Remove first sensor data\n\n      chart.data.labels.push(data.time); //Insert latest sensor data\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.shift(); //Remove first sensor data\n\n        dataset.data.push(sensor[2]); //Insert latest sensor data\n      });\n    }\n\n    chart.update(); //Update the graph.\n  });\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/derek/projects/hackthevalley/myostressmanager/client/src/graph.js"],"names":["Chart","io","Graph","socket","connect","ctx","document","getElementById","getContext","chart","type","data","labels","datasets","label","borderColor","fill","pointStyle","backgroundColor","pointRadius","pointHoverRadius","lineTension","options","on","sensor","read","split","innerHTML","date","length","push","time","forEach","dataset","shift","update"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,SAASC,KAAT,GAAkB;AACV,MAAIC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAW,uBAAX,CAAb,CADU,CACwC;;AAElD,MAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,UAAnC,CAA8C,IAA9C,CAAV;AACA,MAAIC,KAAK,GAAG,IAAIT,KAAJ,CAAUK,GAAV,EAAe;AAC3B;AACAK,IAAAA,IAAI,EAAE,MAFqB;AAI3B;AACAC,IAAAA,IAAI,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,8BADA;AAEPC,QAAAA,WAAW,EAAE,SAFN;AAGPJ,QAAAA,IAAI,EAAE,EAHC;AAIPK,QAAAA,IAAI,EAAE,KAJC;AAKPC,QAAAA,UAAU,EAAE,QALL;AAMPC,QAAAA,eAAe,EAAE,SANV;AAOPC,QAAAA,WAAW,EAAE,CAPN;AAQPC,QAAAA,gBAAgB,EAAE,CARX;AASPC,QAAAA,WAAW,EAAE;AATN,OAAD;AAFJ,KALqB;AAoB3B;AACAC,IAAAA,OAAO,EAAE,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXK;AArBkB,GAAf,CAAZ;AAqCAnB,EAAAA,MAAM,CAACoB,EAAP,CAAU,QAAV,EAAoB,UAASZ,IAAT,EAAe;AAAE;AACrC;AACA,QAAIa,MAAM,GAAGb,IAAI,CAACc,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAb,CAFmC,CAGnC;;AACApB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCoB,SAAhC,GAA4ChB,IAAI,CAACiB,IAAjD,CAJmC,CAIoB;;AACvD,QAAGnB,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBiB,MAAlB,IAA4B,EAA/B,EAAmC;AAAE;AACjCpB,MAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAD+B,CACK;;AACpCtB,MAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,QAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EADqC,CACP;AACjC,OAFD;AAGH,KALD,MAMK;AAAE;AACHf,MAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBsB,KAAlB,GADC,CAC0B;;AAC3BzB,MAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAFC,CAEkC;;AACnCtB,MAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,QAAAA,OAAO,CAACtB,IAAR,CAAauB,KAAb,GADqC,CACf;;AACtBD,QAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EAFqC,CAEP;AACjC,OAHD;AAIH;;AACDf,IAAAA,KAAK,CAAC0B,MAAN,GAnBmC,CAmBnB;AACf,GApBD;AAsBP;;AAED,eAAejC,KAAf","sourcesContent":["import Chart from 'chart.js';\nimport io from 'socket.io-client';\n\nfunction Graph () {\n        let socket = io.connect('http://localhost:5000'); //connect to server\n\n        let ctx = document.getElementById('myChart').getContext('2d');\n        let chart = new Chart(ctx, {\n        // The type of chart we want to create\n        type: 'line',\n\n        // The data for our dataset\n        data: {\n        labels: [],\n        datasets: [{\n            label: \"Electric Potential of Muscle\",\n            borderColor: \"#FF5733\",\n            data: [],\n            fill: false,\n            pointStyle: 'circle',\n            backgroundColor: '#3498DB',\n            pointRadius: 5,\n            pointHoverRadius: 7,\n            lineTension: 0,\n        }]\n        },\n\n        // Configuration options go here\n        options: {\n            // scales: {\n            //   yAxes: [{\n            //     display: true,\n            //     ticks: {\n            //         suggestedMin: 80,    // minimum will be 0, unless there is a lower value.\n            //         // OR //\n            //         // beginAtZero: true   // minimum value will be 0.\n            //         max: 120,\n            //     }\n            //   }]\n            // }\n        }\n            \n        });\n\n        socket.on('sensor', function(data) { //As sensor data is received \n        // console.log(data.read);\n        let sensor = data.read.split(\" \");\n        // console.log(sensor[2]);\n        document.getElementById('date').innerHTML = data.date; //update the date\n        if(chart.data.labels.length != 15) { //If we have less than 15 data points in the graph\n            chart.data.labels.push(data.time);  //Add time in x-asix\n            chart.data.datasets.forEach((dataset) => {\n                dataset.data.push(sensor[2]); //Add sensor data in y-axis\n            });\n        }\n        else { //If there are already 15 data points in the graph.\n            chart.data.labels.shift(); //Remove first sensor data\n            chart.data.labels.push(data.time); //Insert latest sensor data\n            chart.data.datasets.forEach((dataset) => {\n                dataset.data.shift(); //Remove first sensor data\n                dataset.data.push(sensor[2]); //Insert latest sensor data\n            });\n        }\n        chart.update(); //Update the graph.\n        });\n    \n}\n\nexport default Graph\n"]},"metadata":{},"sourceType":"module"}
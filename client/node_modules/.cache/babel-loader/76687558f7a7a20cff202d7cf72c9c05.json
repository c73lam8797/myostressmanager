{"ast":null,"code":"var Chart = require('chart.js');\n\nvar io = require('socket.io')(80);\n\nvar cfg = require('./config.json');\n\nlet socket = io.connect('http://localhost:5000'); //connect to server\n\nlet ctx = document.getElementById('myChart').getContext('2d');\nlet chart = new Chart(ctx, {\n  // The type of chart we want to create\n  type: 'line',\n  // The data for our dataset\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Electric Potential of Muscle\",\n      borderColor: \"#FF5733\",\n      data: [],\n      fill: false,\n      pointStyle: 'circle',\n      backgroundColor: '#3498DB',\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      lineTension: 0\n    }]\n  },\n  // Configuration options go here\n  options: {// scales: {\n    //   yAxes: [{\n    //     display: true,\n    //     ticks: {\n    //         suggestedMin: 80,    // minimum will be 0, unless there is a lower value.\n    //         // OR //\n    //         // beginAtZero: true   // minimum value will be 0.\n    //         max: 120,\n    //     }\n    //   }]\n    // }\n  }\n});\nsocket.on('sensor', function (data) {\n  //As sensor data is received \n  // console.log(data.read);\n  let sensor = data.read.split(\" \"); // console.log(sensor[2]);\n\n  document.getElementById('date').innerHTML = data.date; //update the date\n\n  if (chart.data.labels.length != 15) {\n    //If we have less than 15 data points in the graph\n    chart.data.labels.push(data.time); //Add time in x-asix\n\n    chart.data.datasets.forEach(dataset => {\n      dataset.data.push(sensor[2]); //Add sensor data in y-axis\n    });\n  } else {\n    //If there are already 15 data points in the graph.\n    chart.data.labels.shift(); //Remove first sensor data\n\n    chart.data.labels.push(data.time); //Insert latest sensor data\n\n    chart.data.datasets.forEach(dataset => {\n      dataset.data.shift(); //Remove first sensor data\n\n      dataset.data.push(sensor[2]); //Insert latest sensor data\n    });\n  }\n\n  chart.update(); //Update the graph.\n});","map":{"version":3,"sources":["/home/derek/projects/hackthevalley/myostressmanager/client/src/graph.js"],"names":["Chart","require","io","cfg","socket","connect","ctx","document","getElementById","getContext","chart","type","data","labels","datasets","label","borderColor","fill","pointStyle","backgroundColor","pointRadius","pointHoverRadius","lineTension","options","on","sensor","read","split","innerHTML","date","length","push","time","forEach","dataset","shift","update"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqB,EAArB,CAAT;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,eAAD,CAAjB;;AAEA,IAAIG,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAW,uBAAX,CAAb,C,CAAkD;;AAElD,IAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,UAAnC,CAA8C,IAA9C,CAAV;AACA,IAAIC,KAAK,GAAG,IAAIV,KAAJ,CAAUM,GAAV,EAAe;AACzB;AACAK,EAAAA,IAAI,EAAE,MAFmB;AAIzB;AACAC,EAAAA,IAAI,EAAE;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,QAAQ,EAAE,CAAC;AACPC,MAAAA,KAAK,EAAE,8BADA;AAEPC,MAAAA,WAAW,EAAE,SAFN;AAGPJ,MAAAA,IAAI,EAAE,EAHC;AAIPK,MAAAA,IAAI,EAAE,KAJC;AAKPC,MAAAA,UAAU,EAAE,QALL;AAMPC,MAAAA,eAAe,EAAE,SANV;AAOPC,MAAAA,WAAW,EAAE,CAPN;AAQPC,MAAAA,gBAAgB,EAAE,CARX;AASPC,MAAAA,WAAW,EAAE;AATN,KAAD;AAFJ,GALmB;AAoBzB;AACAC,EAAAA,OAAO,EAAE,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AArBgB,CAAf,CAAZ;AAqCAnB,MAAM,CAACoB,EAAP,CAAU,QAAV,EAAoB,UAASZ,IAAT,EAAe;AAAE;AACnC;AACA,MAAIa,MAAM,GAAGb,IAAI,CAACc,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAb,CAFiC,CAGjC;;AACApB,EAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCoB,SAAhC,GAA4ChB,IAAI,CAACiB,IAAjD,CAJiC,CAIsB;;AACvD,MAAGnB,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBiB,MAAlB,IAA4B,EAA/B,EAAmC;AAAE;AACjCpB,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAD+B,CACK;;AACpCtB,IAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,MAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EADqC,CACP;AACjC,KAFD;AAGH,GALD,MAMK;AAAE;AACHf,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBsB,KAAlB,GADC,CAC0B;;AAC3BzB,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAFC,CAEkC;;AACnCtB,IAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,MAAAA,OAAO,CAACtB,IAAR,CAAauB,KAAb,GADqC,CACf;;AACtBD,MAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EAFqC,CAEP;AACjC,KAHD;AAIH;;AACDf,EAAAA,KAAK,CAAC0B,MAAN,GAnBiC,CAmBjB;AACjB,CApBD","sourcesContent":["var Chart = require('chart.js');\nvar io = require('socket.io')(80);\nvar cfg = require('./config.json');\n\nlet socket = io.connect('http://localhost:5000'); //connect to server\n\nlet ctx = document.getElementById('myChart').getContext('2d');\nlet chart = new Chart(ctx, {\n  // The type of chart we want to create\n  type: 'line',\n\n  // The data for our dataset\n  data: {\n  labels: [],\n  datasets: [{\n      label: \"Electric Potential of Muscle\",\n      borderColor: \"#FF5733\",\n      data: [],\n      fill: false,\n      pointStyle: 'circle',\n      backgroundColor: '#3498DB',\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      lineTension: 0,\n  }]\n  },\n\n  // Configuration options go here\n  options: {\n    // scales: {\n    //   yAxes: [{\n    //     display: true,\n    //     ticks: {\n    //         suggestedMin: 80,    // minimum will be 0, unless there is a lower value.\n    //         // OR //\n    //         // beginAtZero: true   // minimum value will be 0.\n    //         max: 120,\n    //     }\n    //   }]\n    // }\n  }\n    \n});\n\nsocket.on('sensor', function(data) { //As sensor data is received \n  // console.log(data.read);\n  let sensor = data.read.split(\" \");\n  // console.log(sensor[2]);\n  document.getElementById('date').innerHTML = data.date; //update the date\n  if(chart.data.labels.length != 15) { //If we have less than 15 data points in the graph\n      chart.data.labels.push(data.time);  //Add time in x-asix\n      chart.data.datasets.forEach((dataset) => {\n          dataset.data.push(sensor[2]); //Add sensor data in y-axis\n      });\n  }\n  else { //If there are already 15 data points in the graph.\n      chart.data.labels.shift(); //Remove first sensor data\n      chart.data.labels.push(data.time); //Insert latest sensor data\n      chart.data.datasets.forEach((dataset) => {\n          dataset.data.shift(); //Remove first sensor data\n          dataset.data.push(sensor[2]); //Insert latest sensor data\n      });\n  }\n  chart.update(); //Update the graph.\n});"]},"metadata":{},"sourceType":"module"}
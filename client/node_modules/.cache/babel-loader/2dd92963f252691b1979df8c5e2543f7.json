{"ast":null,"code":"// import 'https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js';\n//  import io = require('socket.io-client');\nimport Chart from 'Chart.js';\nimport io from 'socket.io-client';\nlet socket = io.connect('http://localhost:5000'); //connect to server\n\nlet ctx = document.getElementById('myChart').getContext('2d');\nlet chart = new Chart(ctx, {\n  // The type of chart we want to create\n  type: 'line',\n  // The data for our dataset\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Electric Potential of the Muscle\",\n      borderColor: \"#FF5733\",\n      data: [],\n      fill: false,\n      pointStyle: 'circle',\n      backgroundColor: '#3498DB',\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      lineTension: 0\n    }]\n  },\n  // Configuration options go here\n  options: {}\n});\nsocket.on('sensor', function (data) {\n  //As sensor data is received \n  // console.log(data.read);\n  let sensor = data.read.split(\" \"); // console.log(sensor[2]);\n\n  document.getElementById('date').innerHTML = data.date; //update the date\n\n  if (chart.data.labels.length != 15) {\n    //If we have less than 15 data points in the graph\n    chart.data.labels.push(data.time); //Add time in x-asix\n\n    chart.data.datasets.forEach(dataset => {\n      dataset.data.push(sensor[2]); //Add sensor data in y-axis\n    });\n  } else {\n    //If there are already 15 data points in the graph.\n    chart.data.labels.shift(); //Remove first sensor data\n\n    chart.data.labels.push(data.time); //Insert latest sensor data\n\n    chart.data.datasets.forEach(dataset => {\n      dataset.data.shift(); //Remove first sensor data\n\n      dataset.data.push(sensor[2]); //Insert latest sensor data\n    });\n  }\n\n  chart.update(); //Update the graph.\n});","map":{"version":3,"sources":["/home/derek/projects/hackthevalley/myostressmanager/client/src/graph.js"],"names":["Chart","io","socket","connect","ctx","document","getElementById","getContext","chart","type","data","labels","datasets","label","borderColor","fill","pointStyle","backgroundColor","pointRadius","pointHoverRadius","lineTension","options","on","sensor","read","split","innerHTML","date","length","push","time","forEach","dataset","shift","update"],"mappings":"AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAb,C,CAAkD;;AAElD,IAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,UAAnC,CAA8C,IAA9C,CAAV;AACA,IAAIC,KAAK,GAAG,IAAIR,KAAJ,CAAUI,GAAV,EAAe;AAC3B;AACAK,EAAAA,IAAI,EAAE,MAFqB;AAI3B;AACAC,EAAAA,IAAI,EAAE;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,QAAQ,EAAE,CAAC;AACPC,MAAAA,KAAK,EAAE,kCADA;AAEPC,MAAAA,WAAW,EAAE,SAFN;AAGPJ,MAAAA,IAAI,EAAE,EAHC;AAIPK,MAAAA,IAAI,EAAE,KAJC;AAKPC,MAAAA,UAAU,EAAE,QALL;AAMPC,MAAAA,eAAe,EAAE,SANV;AAOPC,MAAAA,WAAW,EAAE,CAPN;AAQPC,MAAAA,gBAAgB,EAAE,CARX;AASPC,MAAAA,WAAW,EAAE;AATN,KAAD;AAFJ,GALqB;AAoB3B;AACAC,EAAAA,OAAO,EAAE;AArBkB,CAAf,CAAZ;AAyBAnB,MAAM,CAACoB,EAAP,CAAU,QAAV,EAAoB,UAASZ,IAAT,EAAe;AAAE;AACrC;AACA,MAAIa,MAAM,GAAGb,IAAI,CAACc,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAb,CAFmC,CAGnC;;AACApB,EAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCoB,SAAhC,GAA4ChB,IAAI,CAACiB,IAAjD,CAJmC,CAIoB;;AACvD,MAAGnB,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBiB,MAAlB,IAA4B,EAA/B,EAAmC;AAAE;AACjCpB,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAD+B,CACK;;AACpCtB,IAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,MAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EADqC,CACP;AACjC,KAFD;AAGH,GALD,MAMK;AAAE;AACHf,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBsB,KAAlB,GADC,CAC0B;;AAC3BzB,IAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBkB,IAAlB,CAAuBnB,IAAI,CAACoB,IAA5B,EAFC,CAEkC;;AACnCtB,IAAAA,KAAK,CAACE,IAAN,CAAWE,QAAX,CAAoBmB,OAApB,CAA6BC,OAAD,IAAa;AACrCA,MAAAA,OAAO,CAACtB,IAAR,CAAauB,KAAb,GADqC,CACf;;AACtBD,MAAAA,OAAO,CAACtB,IAAR,CAAamB,IAAb,CAAkBN,MAAM,CAAC,CAAD,CAAxB,EAFqC,CAEP;AACjC,KAHD;AAIH;;AACDf,EAAAA,KAAK,CAAC0B,MAAN,GAnBmC,CAmBnB;AACf,CApBD","sourcesContent":["// import 'https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js';\n//  import io = require('socket.io-client');\n\nimport Chart from 'Chart.js';\nimport io from 'socket.io-client';\n\nlet socket = io.connect('http://localhost:5000'); //connect to server\n\nlet ctx = document.getElementById('myChart').getContext('2d');\nlet chart = new Chart(ctx, {\n// The type of chart we want to create\ntype: 'line',\n\n// The data for our dataset\ndata: {\nlabels: [],\ndatasets: [{\n    label: \"Electric Potential of the Muscle\",\n    borderColor: \"#FF5733\",\n    data: [],\n    fill: false,\n    pointStyle: 'circle',\n    backgroundColor: '#3498DB',\n    pointRadius: 5,\n    pointHoverRadius: 7,\n    lineTension: 0,\n}]\n},\n\n// Configuration options go here\noptions: {}\n    \n});\n\nsocket.on('sensor', function(data) { //As sensor data is received \n// console.log(data.read);\nlet sensor = data.read.split(\" \");\n// console.log(sensor[2]);\ndocument.getElementById('date').innerHTML = data.date; //update the date\nif(chart.data.labels.length != 15) { //If we have less than 15 data points in the graph\n    chart.data.labels.push(data.time);  //Add time in x-asix\n    chart.data.datasets.forEach((dataset) => {\n        dataset.data.push(sensor[2]); //Add sensor data in y-axis\n    });\n}\nelse { //If there are already 15 data points in the graph.\n    chart.data.labels.shift(); //Remove first sensor data\n    chart.data.labels.push(data.time); //Insert latest sensor data\n    chart.data.datasets.forEach((dataset) => {\n        dataset.data.shift(); //Remove first sensor data\n        dataset.data.push(sensor[2]); //Insert latest sensor data\n    });\n}\nchart.update(); //Update the graph.\n});"]},"metadata":{},"sourceType":"module"}